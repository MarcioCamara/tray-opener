{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/main/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addBreadcrumb,\n  BaseBackend,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getCurrentHub,\n  Scope,\n} from '@sentry/core';\nimport { NodeBackend } from '@sentry/node/dist/backend';\nimport { Event, EventHint, Severity, Transport, TransportOptions } from '@sentry/types';\nimport { Dsn, forget, logger, SentryError } from '@sentry/utils';\nimport { app, crashReporter, ipcMain } from 'electron';\nimport { join } from 'path';\n\nimport { CommonBackend, ElectronOptions, getNameFallback, IPC_EVENT, IPC_PING, IPC_SCOPE } from '../common';\nimport { captureMinidump } from '../sdk';\n\nimport { normalizeUrl } from './normalize';\nimport { Store } from './store';\nimport { NetTransport } from './transports/net';\nimport { MinidumpUploader } from './uploader';\n\n/** Patch to access internal CrashReporter functionality. */\ninterface CrashReporterExt {\n  /** Gets the crashes directory */\n  getCrashesDirectory(): string;\n}\n\n/** Gets the path to the Sentry cache directory. */\nfunction getCachePath(): string {\n  return join(app.getPath('userData'), 'sentry');\n}\n\n/**\n * Retruns a promise that resolves when app is ready.\n */\nexport async function isAppReady(): Promise<boolean> {\n  return (\n    app.isReady() ||\n    // tslint:disable-next-line: no-promise-as-boolean\n    new Promise<boolean>(resolve => {\n      app.once('ready', resolve);\n    })\n  );\n}\n\n/** Backend implementation for Electron renderer backends. */\nexport class MainBackend extends BaseBackend<ElectronOptions> implements CommonBackend<ElectronOptions> {\n  /** The inner SDK used to record Node events. */\n  private readonly _inner: NodeBackend;\n\n  /** Store to persist context information beyond application crashes. */\n  private readonly _scopeStore: Store<Scope>;\n\n  /** Uploader for minidump files. */\n  private _uploader?: MinidumpUploader;\n\n  /** Creates a new Electron backend instance. */\n  public constructor(options: ElectronOptions) {\n    super(options);\n    this._inner = new NodeBackend(options);\n    this._scopeStore = new Store<Scope>(getCachePath(), 'scope_v2', new Scope());\n\n    let success = true;\n\n    // The setImmediate is important here since the client has to be on the hub already that configureScope works\n    setImmediate(() => {\n      this._rehydrateScope();\n      this._setupScopeListener();\n    });\n\n    if (this._isNativeEnabled()) {\n      success = this._installNativeHandler() && success;\n    }\n\n    this._installIPC();\n  }\n\n  /**\n   * Setup Transport\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions: TransportOptions = {\n      ...this._options.transportOptions,\n      ...(this._options.httpProxy && { httpProxy: this._options.httpProxy }),\n      ...(this._options.httpsProxy && { httpsProxy: this._options.httpsProxy }),\n      ...(this._options.caCerts && { caCerts: this._options.caCerts }),\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    return new NetTransport(transportOptions);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: any, hint?: EventHint): PromiseLike<Event> {\n    return this._inner.eventFromException(exception, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return this._inner.eventFromMessage(message, level, hint);\n  }\n\n  /**\n   * Uploads the given minidump and attaches event information.\n   *\n   * @param path A relative or absolute path to the minidump file.\n   * @param event Optional event information to add to the minidump request.\n   */\n  public uploadMinidump(path: string, event: Event = {}): void {\n    if (this._uploader) {\n      forget(this._uploader.uploadMinidump({ path, event }));\n    }\n  }\n\n  /**\n   * Loads the stored scope from disk ands sets it int the current scope\n   */\n  private _rehydrateScope(): void {\n    // We refill the scope here to not have an empty one\n    configureScope(scope => {\n      // tslint:disable:no-unsafe-any\n      const loadedScope = Scope.clone(this._scopeStore.get()) as any;\n\n      if (loadedScope._user) {\n        scope.setUser(loadedScope._user);\n      }\n      scope.setTags(loadedScope._tags);\n      scope.setExtras(loadedScope._extra);\n      if (loadedScope._breadcrumbs) {\n        loadedScope._breadcrumbs.forEach((crumb: any) => {\n          scope.addBreadcrumb(crumb);\n        });\n      }\n      // tslint:enable:no-unsafe-any\n    });\n  }\n\n  /**\n   * Adds a scope listener to persist changes to disk.\n   */\n  private _setupScopeListener(): void {\n    const hubScope = getCurrentHub().getScope();\n    if (hubScope) {\n      hubScope.addScopeListener(updatedScope => {\n        const cloned = Scope.clone(updatedScope);\n        (cloned as any)._eventProcessors = [];\n        (cloned as any)._scopeListeners = [];\n        // tslint:disable-next-line:no-object-literal-type-assertion\n        this._scopeStore.update((current: Scope) => ({ ...current, ...cloned } as Scope));\n      });\n    }\n  }\n\n  /** Returns whether native reports are enabled. */\n  private _isNativeEnabled(): boolean {\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return false;\n    }\n\n    return this._options.enableNative !== false;\n  }\n\n  /** Activates the Electron CrashReporter. */\n  private _installNativeHandler(): boolean {\n    // We are only called by the frontend if the SDK is enabled and a valid DSN\n    // has been configured. If no DSN is present, this indicates a programming\n    // error.\n    const dsnString = this._options.dsn;\n    if (!dsnString) {\n      throw new SentryError('Invariant exception: install() must not be called when disabled');\n    }\n\n    const dsn = new Dsn(dsnString);\n\n    // We will manually submit errors, but CrashReporter requires a submitURL in\n    // some versions. Also, provide a productName and companyName, which we will\n    // add manually to the event's context during submission.\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: this._options.appName || getNameFallback(),\n      submitURL: MinidumpUploader.minidumpUrlFromDsn(dsn),\n      uploadToServer: false,\n    });\n\n    // The crashReporter has an undocumented method to retrieve the directory\n    // it uses to store minidumps in. The structure in this directory depends\n    // on the crash library being used (Crashpad or Breakpad).\n    const reporter: CrashReporterExt = crashReporter as any;\n    const crashesDirectory = reporter.getCrashesDirectory();\n\n    this._uploader = new MinidumpUploader(dsn, crashesDirectory, getCachePath());\n\n    // Flush already cached minidumps from the queue.\n    forget(this._uploader.flushQueue());\n\n    // Start to submit recent minidump crashes. This will load breadcrumbs and\n    // context information that was cached on disk prior to the crash.\n    forget(this._sendNativeCrashes({}));\n\n    // Every time a subprocess or renderer crashes, start sending minidumps\n    // right away.\n    app.on('web-contents-created', (_, contents) => {\n      contents.on('crashed', async () => {\n        try {\n          await this._sendNativeCrashes(this._getRendererExtra(contents));\n        } catch (e) {\n          console.error(e);\n        }\n\n        addBreadcrumb({\n          category: 'exception',\n          level: Severity.Critical,\n          message: 'Renderer Crashed',\n          timestamp: new Date().getTime() / 1000,\n        });\n      });\n\n      if (this._options.enableUnresponsive !== false) {\n        contents.on('unresponsive', () => {\n          captureMessage('BrowserWindow Unresponsive');\n        });\n      }\n    });\n\n    return true;\n  }\n\n  /** Installs IPC handlers to receive events and metadata from renderers. */\n  private _installIPC(): void {\n    ipcMain.on(IPC_PING, (event: Electron.Event) => {\n      event.sender.send(IPC_PING);\n    });\n\n    ipcMain.on(IPC_EVENT, (ipc: Electron.Event, event: Event) => {\n      event.extra = {\n        ...this._getRendererExtra(ipc.sender),\n        ...event.extra,\n      };\n      captureEvent(event);\n    });\n\n    ipcMain.on(IPC_SCOPE, (_: any, rendererScope: Scope) => {\n      // tslint:disable:no-unsafe-any\n      const sentScope = Scope.clone(rendererScope) as any;\n      configureScope(scope => {\n        if (sentScope._user) {\n          scope.setUser(sentScope._user);\n        }\n        scope.setTags(sentScope._tags);\n        scope.setExtras(sentScope._extra);\n        // Since we do not have updates for individual breadcrumbs anymore and only for the whole scope\n        // we just add the last added breadcrumb on scope updates\n        scope.addBreadcrumb(sentScope._breadcrumbs.pop());\n      });\n      // tslint:enable:no-unsafe-any\n    });\n  }\n\n  /** Loads new native crashes from disk and sends them to Sentry. */\n  private async _sendNativeCrashes(extra: object): Promise<void> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    const uploader = this._uploader;\n    if (uploader === undefined) {\n      throw new SentryError('Invariant violation: Native crashes not enabled');\n    }\n\n    const currentCloned = Scope.clone(getCurrentHub().getScope());\n    const fetchedScope = this._scopeStore.get();\n    try {\n      const storedScope = Scope.clone(fetchedScope);\n      let newEvent = await storedScope.applyToEvent({ extra });\n\n      if (newEvent) {\n        newEvent = await currentCloned.applyToEvent(newEvent);\n        const paths = await uploader.getNewMinidumps();\n        paths.map(path => {\n          captureMinidump(path, { ...newEvent });\n        });\n      }\n    } catch (_oO) {\n      logger.error('Error while sending native crash.');\n    }\n  }\n\n  /** Returns extra information from a renderer's web contents. */\n  private _getRendererExtra(contents: Electron.WebContents): { [key: string]: any } {\n    const customName = this._options.getRendererName && this._options.getRendererName(contents);\n\n    return {\n      crashed_process: customName || `renderer[${contents.id}]`,\n      crashed_url: normalizeUrl(contents.getURL()),\n    };\n  }\n}\n"]}