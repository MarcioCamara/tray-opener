{"version":3,"file":"net.js","sourceRoot":"","sources":["../../../src/main/transports/net.ts"],"names":[],"mappings":";;AAAA,uCAA0C;AAC1C,yCAA0E;AAC1E,yCAA2D;AAC3D,uCAA+B;AAE/B,wCAAwC;AAExC,mCAAmC;AACnC,MAAa,YAAa,SAAQ,iBAAU,CAAC,aAAa;IAIxD,+CAA+C;IAC/C,YAA0B,OAAyB;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;QADS,YAAO,GAAP,OAAO,CAAkB;QAJnD,4CAA4C;QACzB,YAAO,GAA4B,IAAI,qBAAa,CAAC,EAAE,CAAC,CAAC;IAK5E,CAAC;IAED;;OAEG;IACU,SAAS,CAAC,KAAY;;YACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;gBAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,mBAAW,CAAC,iDAAiD,CAAC,CAAC,CAAC;aAC3F;YACD,MAAM,oBAAU,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CACrB,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACxC,MAAM,GAAG,GAAG,cAAG,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;gBACnD,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACxB,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,GAA6B,EAAE,EAAE;oBACnD,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE;wBACnE,OAAO,CAAC;4BACN,MAAM,EAAE,cAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC;yBAC5C,CAAC,CAAC;qBACJ;yBAAM;wBACL,+BAA+B;wBAC/B,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;4BAChD,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;4BAC7C,8BAA8B;4BAC9B,MAAM,CAAC,IAAI,mBAAW,CAAC,eAAe,GAAG,CAAC,UAAU,MAAM,MAAM,EAAE,CAAC,CAAC,CAAC;yBACtE;6BAAM;4BACL,MAAM,CAAC,IAAI,mBAAW,CAAC,eAAe,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;yBAC3D;qBACF;oBACD,4BAA4B;oBAC5B,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;wBAClB,QAAQ;oBACV,CAAC,CAAC,CAAC;oBACH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;wBACjB,QAAQ;oBACV,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjC,GAAG,CAAC,GAAG,EAAE,CAAC;YACZ,CAAC,CAAC,CACH,CAAC;QACJ,CAAC;KAAA;CACF;AAjDD,oCAiDC","sourcesContent":["import { Transports } from '@sentry/node';\nimport { Event, Response, Status, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\nimport { net } from 'electron';\n\nimport { isAppReady } from '../backend';\n\n/** Using net module of electron */\nexport class NetTransport extends Transports.BaseTransport {\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  /** Create a new instance and set this.agent */\n  public constructor(public options: TransportOptions) {\n    super(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(event: Event): Promise<Response> {\n    if (!this._buffer.isReady()) {\n      return Promise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    await isAppReady();\n    return this._buffer.add(\n      new Promise<Response>((resolve, reject) => {\n        const req = net.request(this._getRequestOptions());\n        req.on('error', reject);\n        req.on('response', (res: Electron.IncomingMessage) => {\n          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n            resolve({\n              status: Status.fromHttpCode(res.statusCode),\n            });\n          } else {\n            // tslint:disable:no-unsafe-any\n            if (res.headers && res.headers['x-sentry-error']) {\n              const reason = res.headers['x-sentry-error'];\n              // tslint:enable:no-unsafe-any\n              reject(new SentryError(`HTTP Error (${res.statusCode}): ${reason}`));\n            } else {\n              reject(new SentryError(`HTTP Error (${res.statusCode})`));\n            }\n          }\n          // force the socket to drain\n          res.on('data', () => {\n            // Drain\n          });\n          res.on('end', () => {\n            // Drain\n          });\n        });\n        req.write(JSON.stringify(event));\n        req.end();\n      }),\n    );\n  }\n}\n"]}