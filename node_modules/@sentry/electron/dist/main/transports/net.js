Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_1 = require("@sentry/node");
const types_1 = require("@sentry/types");
const utils_1 = require("@sentry/utils");
const electron_1 = require("electron");
const backend_1 = require("../backend");
/** Using net module of electron */
class NetTransport extends node_1.Transports.BaseTransport {
    /** Create a new instance and set this.agent */
    constructor(options) {
        super(options);
        this.options = options;
        /** A simple buffer holding all requests. */
        this._buffer = new utils_1.PromiseBuffer(30);
    }
    /**
     * @inheritDoc
     */
    sendEvent(event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this._buffer.isReady()) {
                return Promise.reject(new utils_1.SentryError('Not adding Promise due to buffer limit reached.'));
            }
            yield backend_1.isAppReady();
            return this._buffer.add(new Promise((resolve, reject) => {
                const req = electron_1.net.request(this._getRequestOptions());
                req.on('error', reject);
                req.on('response', (res) => {
                    if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {
                        resolve({
                            status: types_1.Status.fromHttpCode(res.statusCode),
                        });
                    }
                    else {
                        // tslint:disable:no-unsafe-any
                        if (res.headers && res.headers['x-sentry-error']) {
                            const reason = res.headers['x-sentry-error'];
                            // tslint:enable:no-unsafe-any
                            reject(new utils_1.SentryError(`HTTP Error (${res.statusCode}): ${reason}`));
                        }
                        else {
                            reject(new utils_1.SentryError(`HTTP Error (${res.statusCode})`));
                        }
                    }
                    // force the socket to drain
                    res.on('data', () => {
                        // Drain
                    });
                    res.on('end', () => {
                        // Drain
                    });
                });
                req.write(JSON.stringify(event));
                req.end();
            }));
        });
    }
}
exports.NetTransport = NetTransport;
//# sourceMappingURL=net.js.map