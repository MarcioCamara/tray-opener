Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_1 = require("@sentry/node");
const types_1 = require("@sentry/types");
const electron_1 = require("electron");
/** Capture unhandled erros. */
class OnUncaughtException {
    /**
     * @inheritDoc
     */
    constructor(_options = {}) {
        this._options = _options;
        /**
         * @inheritDoc
         */
        this.name = OnUncaughtException.id;
    }
    /**
     * @inheritDoc
     */
    setupOnce() {
        global.process.on('uncaughtException', (error) => {
            const self = node_1.getCurrentHub().getIntegration(OnUncaughtException);
            if (self) {
                node_1.getCurrentHub().withScope((scope) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    scope.addEventProcessor((event) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        return (Object.assign(Object.assign({}, event), { level: types_1.Severity.Fatal }));
                    }));
                    const nodeClient = node_1.getCurrentHub().getClient();
                    nodeClient.captureException(error, { originalException: error }, node_1.getCurrentHub().getScope());
                    yield nodeClient.flush(nodeClient.getOptions().shutdownTimeout || 2000);
                    if (this._options.onFatalError) {
                        this._options.onFatalError(error);
                    }
                    else if (global.process.listenerCount('uncaughtException') <= 2) {
                        // In addition to this handler there is always one in Electron
                        // The dialog is only shown if there are no other handlers
                        console.error('Uncaught Exception:');
                        console.error(error);
                        const ref = error.stack;
                        const stack = ref !== undefined ? ref : `${error.name}: ${error.message}`;
                        const message = `Uncaught Exception:\n${stack}`;
                        electron_1.dialog.showErrorBox('A JavaScript error occurred in the main process', message);
                    }
                }));
            }
        });
    }
}
exports.OnUncaughtException = OnUncaughtException;
/**
 * @inheritDoc
 */
OnUncaughtException.id = 'OnUncaughtException';
//# sourceMappingURL=onuncaughtexception.js.map