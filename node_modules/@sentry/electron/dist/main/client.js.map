{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/main/client.ts"],"names":[],"mappings":";;AAAA,uCAAiD;AAEjD,yCAAoD;AAGpD,gCAAkC;AAElC,uCAAwC;AACxC,uCAA6C;AAC7C,2CAA6C;AAE7C,uCAAuC;AACvC,2BAA2B;AACd,QAAA,WAAW,GAAW,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC;AAEzE,8DAA8D;AAC9D,MAAa,UAAW,SAAQ,iBAAwC;IACtE;;;OAGG;IACH,YAAmB,OAAwB;QACzC,KAAK,CAAC,qBAAW,EAAE,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,KAAY,EAAE,KAAa,EAAE,IAAgB;QACnE,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC;QAC1C,KAAK,CAAC,GAAG,mCACJ,KAAK,CAAC,GAAG,KACZ,IAAI,EAAE,cAAQ,EACd,QAAQ,EAAE;gBACR,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC5C;oBACE,IAAI,EAAE,sBAAsB;oBAC5B,OAAO,EAAE,mBAAW;iBACrB;aACF,EACD,OAAO,EAAE,mBAAW,GACrB,CAAC;QAEF,OAAO,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,WAAyB,EAAE,EAAE,CAChF,IAAI,mBAAW,CAAQ,CAAM,OAAO,EAAC,EAAE;YACrC,IAAI,WAAW,EAAE;gBACf,OAAO,CAAC,0BAAc,CAAC,MAAM,0BAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;aACrF;iBAAM;gBACL,OAAO,CAAC,WAAW,CAAC,CAAC;aACtB;QACH,CAAC,CAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAe,EAAE,EAAE,CAAC,CAAC,CAAC,CAChC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,eAAe,CAAC,IAAY,EAAE,QAAe,EAAE,EAAE,KAAa;QACnE,IAAI,OAA2B,CAAC;QAEhC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,KAAK,CAAC,IAAI,mBAAK,UAAU,EAAE,QAAQ,IAAK,KAAK,CAAC,IAAI,CAAE,CAAC;QAErD,6FAA6F;QAC7F,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,IAAI,CAC9C,UAAU,CAAC,EAAE;YACX,IAAI,UAAU,EAAE;gBACd,OAAO,GAAG,UAAU,IAAI,UAAU,CAAC,QAAQ,CAAC;gBAC5C,IAAI,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aACrD;YACD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,CAAC,EACD,MAAM,CAAC,EAAE;YACP,cAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,CAAC,CACF,CAAC;QAEF,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,KAAY,EAAE,IAAgB,EAAE,KAAa;QAC/D,KAAK,CAAC,IAAI,mBAAK,UAAU,EAAE,YAAY,IAAK,KAAK,CAAC,IAAI,CAAE,CAAC;QACzD,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,gBAAgB,CAAC,CAAM;QAC5B,OAAO;IACT,CAAC;CACF;AApFD,gCAoFC","sourcesContent":["import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { logger, SyncPromise } from '@sentry/utils';\n\nimport { CommonClient, ElectronOptions } from '../common';\nimport { SDK_NAME } from '../sdk';\n\nimport { MainBackend } from './backend';\nimport { addEventDefaults } from './context';\nimport { normalizeEvent } from './normalize';\n\n/** SDK version used in every event. */\n// tslint:disable-next-line\nexport const SDK_VERSION: string = require('../../package.json').version;\n\n/** Frontend implementation for Electron renderer backends. */\nexport class MainClient extends BaseClient<MainBackend, ElectronOptions> implements CommonClient {\n  /**\n   * Creates a new Electron SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ElectronOptions) {\n    super(MainBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'node';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/electron',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint).then((filledEvent: Event | null) =>\n      new SyncPromise<Event>(async resolve => {\n        if (filledEvent) {\n          resolve(normalizeEvent(await addEventDefaults(this._options.appName, filledEvent)));\n        } else {\n          resolve(filledEvent);\n        }\n      }).then((e: Event | null) => e),\n    );\n  }\n\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope Optional SDK scope used to upload.\n   */\n  public captureMinidump(path: string, event: Event = {}, scope?: Scope): string | undefined {\n    let eventId: string | undefined;\n\n    this._processing = true;\n\n    event.tags = { event_type: 'native', ...event.tags };\n\n    // We are not calling _processEvent here since we do not have beforeSend for minidump crashes\n    this._prepareEvent(event, scope, undefined).then(\n      finalEvent => {\n        if (finalEvent) {\n          eventId = finalEvent && finalEvent.event_id;\n          this._getBackend().uploadMinidump(path, finalEvent);\n        }\n        this._processing = false;\n      },\n      reason => {\n        logger.error(reason);\n        this._processing = false;\n      },\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    event.tags = { event_type: 'javascript', ...event.tags };\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Does nothing in main/node\n   */\n  public showReportDialog(_: any): void {\n    // noop\n  }\n}\n"]}