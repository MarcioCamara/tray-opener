{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/renderer/client.ts"],"names":[],"mappings":";AAAA,6CAAqE;AACrE,uCAAgE;AAEhE,yCAAuC;AAIvC,uCAA4C;AAE5C,8DAA8D;AAC9D,MAAa,cAAe,SAAQ,iBAA4C;IAM9E;;;OAGG;IACH,YAAmB,OAAwB;QACzC,KAAK,CAAC,yBAAe,EAAE,OAAO,CAAC,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,uBAAa,iCAAM,OAAO,KAAE,mBAAmB,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,IAAG,CAAC;IAChG,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,KAAY,EAAE,KAAa,EAAE,IAAgB;QACnE,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,YAAY,CAAC;QAChD,OAAO,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;OAMG;IACI,eAAe;QACpB,cAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QACzD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;OAGG;IACI,gBAAgB,CAAC,UAA+B,EAAE;QACvD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACpB,OAAO,CAAC,OAAO,GAAG,oBAAa,EAAE,CAAC,WAAW,EAAE,CAAC;SACjD;QACD,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;CACF;AA7CD,wCA6CC","sourcesContent":["import { BrowserClient, ReportDialogOptions } from '@sentry/browser';\nimport { BaseClient, getCurrentHub, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { CommonClient, ElectronOptions } from '../common';\n\nimport { RendererBackend } from './backend';\n\n/** Frontend implementation for Electron renderer backends. */\nexport class RendererClient extends BaseClient<RendererBackend, ElectronOptions> implements CommonClient {\n  /**\n   * Internal used browser client\n   */\n  private readonly _inner: BrowserClient;\n\n  /**\n   * Creates a new Electron SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ElectronOptions) {\n    super(RendererBackend, options);\n    this._inner = new BrowserClient({ ...options, defaultIntegrations: false, integrations: [] });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope The SDK scope used to upload.\n   */\n  public captureMinidump(): string | undefined {\n    logger.warn('captureMinidump is a noop on the renderer');\n    return undefined;\n  }\n\n  /**\n   * Basically calling {@link BrowserClient.showReportDialog}\n   * @inheritdoc\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    if (!options.eventId) {\n      options.eventId = getCurrentHub().lastEventId();\n    }\n    this._inner.showReportDialog(options);\n  }\n}\n"]}