import { BaseBackend } from '@sentry/core';
import { Event, EventHint, Severity } from '@sentry/types';
import { CommonBackend, ElectronOptions } from '../common';
/** Backend implementation for Electron renderer backends. */
export declare class RendererBackend extends BaseBackend<ElectronOptions> implements CommonBackend<ElectronOptions> {
    /** The inner SDK used to record JavaScript events. */
    private readonly _inner;
    /** Creates a new Electron backend instance. */
    constructor(options: ElectronOptions);
    /**
     * @inheritDoc
     */
    eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;
    /**
     * @inheritDoc
     */
    eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;
    /**
     * @inheritDoc
     */
    sendEvent(event: Event): void;
    /**
     * Sends the scope to the main process once it updates.
     */
    private _setupScopeListener;
    /** Returns whether JS is enabled. */
    private _isJavaScriptEnabled;
    /** Returns whether native reports are enabled. */
    private _isNativeEnabled;
    /** Activates the Electron CrashReporter. */
    private _installNativeHandler;
    /** Checks if the main processes is available and logs a warning if not. */
    private _pingMainProcess;
}
//# sourceMappingURL=backend.d.ts.map