Object.defineProperty(exports, "__esModule", { value: true });
const backend_1 = require("@sentry/browser/dist/backend");
const core_1 = require("@sentry/core");
const electron_1 = require("electron");
const common_1 = require("../common");
/** Timeout used for registering with the main process. */
const PING_TIMEOUT = 500;
/** Backend implementation for Electron renderer backends. */
class RendererBackend extends core_1.BaseBackend {
    /** Creates a new Electron backend instance. */
    constructor(options) {
        super(options);
        if (this._isNativeEnabled()) {
            this._installNativeHandler();
        }
        this._inner = new backend_1.BrowserBackend(Object.assign({ enabled: this._isJavaScriptEnabled() }, options));
        this._pingMainProcess();
        this._setupScopeListener();
    }
    /**
     * @inheritDoc
     */
    eventFromException(exception, hint) {
        return this._inner.eventFromException(exception, hint);
    }
    /**
     * @inheritDoc
     */
    eventFromMessage(message, level, hint) {
        return this._inner.eventFromMessage(message, level, hint);
    }
    /**
     * @inheritDoc
     */
    sendEvent(event) {
        // We pass through JSON because in Electron >= 8, IPC uses v8's structured clone algorithm and throws errors if
        // objects have functions
        electron_1.ipcRenderer.send(common_1.IPC_EVENT, JSON.parse(JSON.stringify(event)));
    }
    /**
     * Sends the scope to the main process once it updates.
     */
    _setupScopeListener() {
        const scope = core_1.getCurrentHub().getScope();
        if (scope) {
            scope.addScopeListener(updatedScope => {
                // We pass through JSON because in Electron >= 8, IPC uses v8's structured clone algorithm and throws errors if
                // objects have functions
                electron_1.ipcRenderer.send(common_1.IPC_SCOPE, JSON.parse(JSON.stringify(updatedScope)));
                scope.clearBreadcrumbs();
            });
        }
    }
    /** Returns whether JS is enabled. */
    _isJavaScriptEnabled() {
        return this._options.enableJavaScript !== false;
    }
    /** Returns whether native reports are enabled. */
    _isNativeEnabled() {
        // On macOS, we should start the Electron CrashReporter only in the main
        // process. It uses Crashpad internally, which will catch errors from all
        // sub processes thanks to out-of-processes crash handling. On other
        // platforms we need to start the CrashReporter in every sub process. For
        // more information see: https://goo.gl/nhqqwD
        if (process.platform === 'darwin') {
            return false;
        }
        // Mac AppStore builds cannot run the crash reporter due to the sandboxing
        // requirements. In this case, we prevent enabling native crashes entirely.
        // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build
        if (process.mas) {
            return false;
        }
        return this._options.enableNative !== false;
    }
    /** Activates the Electron CrashReporter. */
    _installNativeHandler() {
        // We will manually submit errors, but CrashReporter requires a submitURL in
        // some versions. Also, provide a productName and companyName, which we will
        // add manually to the event's context during submission.
        electron_1.crashReporter.start({
            companyName: '',
            ignoreSystemCrashHandler: true,
            productName: this._options.appName || common_1.getNameFallback(),
            submitURL: '',
            uploadToServer: false,
        });
        return true;
    }
    /** Checks if the main processes is available and logs a warning if not. */
    _pingMainProcess() {
        // For whatever reason we have to wait PING_TIMEOUT until we send the ping
        // to main.
        setTimeout(() => {
            electron_1.ipcRenderer.send(common_1.IPC_PING);
            const timeout = setTimeout(() => {
                console.warn('Could not connect to Sentry main process. Did you call init?');
            }, PING_TIMEOUT);
            electron_1.ipcRenderer.on(common_1.IPC_PING, () => {
                clearTimeout(timeout);
            });
        }, PING_TIMEOUT);
    }
}
exports.RendererBackend = RendererBackend;
//# sourceMappingURL=backend.js.map