{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/renderer/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserBackend } from '@sentry/browser/dist/backend';\nimport { BaseBackend, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Severity } from '@sentry/types';\nimport { crashReporter, ipcRenderer } from 'electron';\n\nimport { CommonBackend, ElectronOptions, getNameFallback, IPC_EVENT, IPC_PING, IPC_SCOPE } from '../common';\n\n/** Timeout used for registering with the main process. */\nconst PING_TIMEOUT = 500;\n\n/** Backend implementation for Electron renderer backends. */\nexport class RendererBackend extends BaseBackend<ElectronOptions> implements CommonBackend<ElectronOptions> {\n  /** The inner SDK used to record JavaScript events. */\n  private readonly _inner: BrowserBackend;\n\n  /** Creates a new Electron backend instance. */\n  public constructor(options: ElectronOptions) {\n    super(options);\n\n    if (this._isNativeEnabled()) {\n      this._installNativeHandler();\n    }\n\n    this._inner = new BrowserBackend({\n      enabled: this._isJavaScriptEnabled(),\n      ...options,\n    });\n\n    this._pingMainProcess();\n    this._setupScopeListener();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: any, hint?: EventHint): PromiseLike<Event> {\n    return this._inner.eventFromException(exception, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event> {\n    return this._inner.eventFromMessage(message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    // We pass through JSON because in Electron >= 8, IPC uses v8's structured clone algorithm and throws errors if\n    // objects have functions\n    ipcRenderer.send(IPC_EVENT, JSON.parse(JSON.stringify(event)));\n  }\n\n  /**\n   * Sends the scope to the main process once it updates.\n   */\n  private _setupScopeListener(): void {\n    const scope = getCurrentHub().getScope();\n    if (scope) {\n      scope.addScopeListener(updatedScope => {\n        // We pass through JSON because in Electron >= 8, IPC uses v8's structured clone algorithm and throws errors if\n        // objects have functions\n        ipcRenderer.send(IPC_SCOPE, JSON.parse(JSON.stringify(updatedScope)));\n        scope.clearBreadcrumbs();\n      });\n    }\n  }\n\n  /** Returns whether JS is enabled. */\n  private _isJavaScriptEnabled(): boolean {\n    return this._options.enableJavaScript !== false;\n  }\n\n  /** Returns whether native reports are enabled. */\n  private _isNativeEnabled(): boolean {\n    // On macOS, we should start the Electron CrashReporter only in the main\n    // process. It uses Crashpad internally, which will catch errors from all\n    // sub processes thanks to out-of-processes crash handling. On other\n    // platforms we need to start the CrashReporter in every sub process. For\n    // more information see: https://goo.gl/nhqqwD\n    if (process.platform === 'darwin') {\n      return false;\n    }\n\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return false;\n    }\n\n    return this._options.enableNative !== false;\n  }\n\n  /** Activates the Electron CrashReporter. */\n  private _installNativeHandler(): boolean {\n    // We will manually submit errors, but CrashReporter requires a submitURL in\n    // some versions. Also, provide a productName and companyName, which we will\n    // add manually to the event's context during submission.\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: this._options.appName || getNameFallback(),\n      submitURL: '',\n      uploadToServer: false,\n    });\n\n    return true;\n  }\n\n  /** Checks if the main processes is available and logs a warning if not. */\n  private _pingMainProcess(): void {\n    // For whatever reason we have to wait PING_TIMEOUT until we send the ping\n    // to main.\n    setTimeout(() => {\n      ipcRenderer.send(IPC_PING);\n\n      const timeout = setTimeout(() => {\n        console.warn('Could not connect to Sentry main process. Did you call init?');\n      }, PING_TIMEOUT);\n\n      ipcRenderer.on(IPC_PING, () => {\n        clearTimeout(timeout);\n      });\n    }, PING_TIMEOUT);\n  }\n}\n"]}