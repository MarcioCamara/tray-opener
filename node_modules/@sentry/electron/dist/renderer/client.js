Object.defineProperty(exports, "__esModule", { value: true });
const browser_1 = require("@sentry/browser");
const core_1 = require("@sentry/core");
const utils_1 = require("@sentry/utils");
const backend_1 = require("./backend");
/** Frontend implementation for Electron renderer backends. */
class RendererClient extends core_1.BaseClient {
    /**
     * Creates a new Electron SDK instance.
     * @param options Configuration options for this SDK.
     */
    constructor(options) {
        super(backend_1.RendererBackend, options);
        this._inner = new browser_1.BrowserClient(Object.assign(Object.assign({}, options), { defaultIntegrations: false, integrations: [] }));
    }
    /**
     * @inheritDoc
     */
    _prepareEvent(event, scope, hint) {
        event.platform = event.platform || 'javascript';
        return super._prepareEvent(event, scope, hint);
    }
    /**
     * Uploads a native crash dump (Minidump) to Sentry.
     *
     * @param path The relative or absolute path to the minidump.
     * @param event Optional event payload to attach to the minidump.
     * @param scope The SDK scope used to upload.
     */
    captureMinidump() {
        utils_1.logger.warn('captureMinidump is a noop on the renderer');
        return undefined;
    }
    /**
     * Basically calling {@link BrowserClient.showReportDialog}
     * @inheritdoc
     */
    showReportDialog(options = {}) {
        if (!options.eventId) {
            options.eventId = core_1.getCurrentHub().lastEventId();
        }
        this._inner.showReportDialog(options);
    }
}
exports.RendererClient = RendererClient;
//# sourceMappingURL=client.js.map